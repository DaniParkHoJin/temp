함수
1. 함수 정의하기
	1) 함수 선언문으로 정의하는 방법
	- function (함수명)
	
	2) 함수 리터럴로 정의하는 방법
	- 함수가 값/객체
	
	3) Function 생성자로 정의하는 방법
	- 모든 함수는 Function 생성자로 부터 생성된 객체
	
	4) 화살표 함수 표현식으로 정의하는 방법
	- 함수가 매개변수로 사용되는 경우 : 함수 내부에서만 제한적으로 사용
	- 형식을 단순화 해서 사용
	- 거의 매개변수로 사용, 객체를 만들 수 없다.
	 가) function 키워드와, 함수명을 생략
	 나) 매개변수와 구현 코드 부분 사이에 =>
	 다) 구현 코드가 1줄일때는 { }중괄호 부분도 생략 가능, return도 생략
	 라) 변수명도 최대한 짧게 사용
	 마) 매개변수가 1개일때는 ( )소괄호 생략 가능
	 바) 매개변수가 없을 때는 ( )소괄호 생략 불가
	
참고)
	일급 객체 / 일등 함수
	- 함수를 변수와 동일하게 취급
	- 함수가 객체 / 함수는 값
	- 함수가 매개변수로 사용 가능
	- 함수가 반환값으로 사용 가능
		-> 글로저 : 고차 함수
	- 함수형 프로그래밍
	
2. 중첩 함수 -> 6.프로그램 평가과 실행과정을 알아야한다
	- 함수 안에 함수가 정의된 구조

3. 함수 호출하기
	1) 함수 호출
	2) 메서드 호출
	3) 생성자 호출
	4) call, apply를 사용한 간접 호출
	- 모든 함수는 Function 생성자 함수 객체에서 만들어진 객체
	- Function.proptotype에서 정의된 메서드
		간접 호출
			-call
			-apply
			
		bind - 함수를 생성
	
4. 즉시 실행 함수

5. 함수의 인수
	1) 인수의 생략
	2) 가변 길이 인수 목록(Arguments 객체) - getter, setter가 있다 -> (...)
	- 투입된 값에 대한 정보가 있는 객체, 개수가 정해지지 않았을 때 많이 사용
	3) 재귀 함수
	- 본인이 본인을 호출하는 함수
	- 팩토리얼 연산 : !5 -> 5 * 4 * 3 * 2 * 1
	- 현재는 ... 형태의 전개 연산자를 많이 사용한다 (ES6) 배열의 값을 복사할 때(깊은 복사)

6. 프로그램 평가와 실행과정(번역!!!)
	- 함수는 표현문 객체 -> 실행 X -> 실행가능한 객체로 변역 -> EC(Execution Context)객체 변환 -> 호출 스택에서 실행
	- 함수를 정의만 한 것이다 -> 번역이 필요하다
	- 유효범위 체인(Scope)!!! 외부 EC를 내부 EC가 참조한다
	- 모든 함수는 Global EC에서 실행된다 -> Window 객체는 탭을 열 때마나 하나씩 생긴다. 참조!!!
	- 평가 과정을 통해 모든 변수가 올라가 있다(스택형식) -> 호이스팅
	- this 바인딩 : 함수가 호출한 객체의 주소(this는 호출되고 EC 구성 과정에서 결정: EC 구정 전에 this값을 변경)
	- 생성자 -> 객체가 되는 과정 
		
7. 자바스크립트는 싱글 스레드(작업 공간)
	- 호출스택 + 메인 작업 공간 메서드(사용자 정의 작업 공간 메서드)
	- 병렬 작업 X
	- 작업 공간이 하나다
	- 지연 시간이 생긴다
	- 이벤트 주도 방식의 비동기 처리 -> 여러 작없을 동시 처리
		
8. 클로저
	- 자유변수(스코프를 통해 찾을 수 있는 변수)가 속박변수가 된다
	- 내부 상태가 유지되는 형태

9. 이름 공간
	- 중복될 가능성이 있는 경우, 다른 이름을 앞에 붙인다 -> 대중적인 명칭이라면 구분 값을 넣어 준다
	1) 전역 이름 공간의 오염
	2) 객체를 이름 공간으로 활용하기
	3) 함수를 이름 공간으로 활용하기
	- 즉시실행 함수, 모듈 패턴 : 캡슐화
	(function(){
			// 즉시실행코드
		})();
		
10. 제너레이터
	자료에 대한 시점을 기록해서 이동하는 것, 메모리 용량 이상(대용량 파일)의 작업을 해야하는 경우 커서를 이동하면서 하나씩 가지고 온다
	function* name () {
		let a, b, c 			<- 변수 설정
		yield a;				<- 불러올 것
		yield b;
		yield c;
		
		return d;
	}
	
11. 정적 함수(메서드)로 비슷하게 사용하는 방법
	함수명.staticMethod =
	


