JSON
1. JSON 이란?
	JavaScript Object Notation : 자바스크립트 객체 표기법
	- 문자열 데이터
	{"키" : "값", ...}
	다른 프로그래밍 언어와 테이터 송수신을 하기 위한
2. 표기 방법

3. JSON의 변환과 환원
	JSON 문자열 -> 자바스크립트 객체 변환
	자바스크립트 객체 -> JSON 문자열
	
	JSON 내장 객체로 변환해야 한다.
		.stringify(자바스크립트 객체) : 자바스크립트 객체-> JSON 문자열 반환
		.parse(JSON 문자열) : JSON 문자열 -> 자바스크립트 객체
	
4. JSON을 활용한 객체의 깊은 복사
	- 중첩된 객체인 경우 유용하게 활용할 수 있다.
	JSON.parse(JSON.stringify(...));
	참고) Object.assign 메서드(깊은 복사X)
	

생성자
1. 생성자를 정의하는 방법
	1) 함수 선언문으로 정의하는 방법
	2) 함수 리터럴로 정의하는 방법
	3) 클래스 선언문으로 정의하는 방법
	4) 클래스 표현식으로 정의하는 방법

2. 생성자로 접근자 프로퍼티 정의하기

3. 생성자 상속
	1) 생성자의 prototype 상속하기
	2) 생성자 빌려오기
	3) 슈퍼 타입의 메서드 이용하기


클래스 구문
1. 클래스 구문의 기본
	ES6+
	1) 클래스 선언문을 작성하는 방법
	class 클래스명(생성자 명) {
		constructor(매개변수) {
		this.변수명 = 매개변수;
		}
	}
	-> 클래스를 가장한 생성자 함수 객체
	
	2) 클래스 선언문과 함수 선언문의 차이점
	- 클래스 선언문은 자바스크립트 엔진이 끌어올리지 않습니다. 따라서 생성자를 사용하기 전에 클래스 선언문을 작성해야 합니다.
	- 클래스 선언문은 한 번만 작성할 수 있습니다. 같은 이름을 가진 클래스 선언문을 두 번 이상 작성하면 타입 오류가 발생합니다.
	- 클래스 선언문에 정의한 생성자만 따로 호출할 수 없습니다.

2. 접근자 작성하기

3. 정적 메서드 작성하기

4. 상속으로 클래스 확장하기

5. 슈퍼 타입의 메서드 호출하기


ECMAScript6+에 추가된 객체의 기
1. 프로퍼티 이름으로 심벌 사용하기

2. 객체 리터럴에 추가된 기능

	1) 계산된 프로퍼티 이름(Computed Property names)
	2) 프로퍼티 정의의 약식 표기 : { prop }
	3) 메서드 정의의 약식 표기 : { method() {} }
	4) 제너레이터 정의의 약식표기 {*generate() {} }
