배열
1. 배열의 기초
	- Array 생성자로 만들어진 객체
	1) 배열 리터럴로 생성하기
	축약형으로 많이 사용한다.
	const 배열명 = [...]; // new Array -> 대괄호만
	
	2) length 프로퍼티
	
	3) Array 생성자로 생성하기
	const 배열명 = new Array(매개변수);
		
	- 매개변수가 1개일 때는 배열 공간의 갯수
	- 양의 정수 숫자 가능, 0도 가능
	- 매개변수가 여러개 일 때는 갯수만큼 공간이 생성되고, 값이 순서대로 추가
		
	4) 배열 요소의 참조
	
	5) 배열은 객체
	- 대괄호를 통해서 접근할 수 있다.
	
	6) 배열 요소의 추가와 삭제
	- 추가
		push(...items) : 끝에 추가
		unshift(...items) : 앞에 추가
		
	- 삭제
		pop() : 가장 끝의 요소 꺼내기
		shift() : 가장 앞의 요소 꺼내기
		
	- 중간 추가, 삭제, 변경
		splice(start, deleteCount, ...items)
	
	7) 배열 요소가 있는지 확인하기


@@ 심볼 - 이터레이터 -> 반복자, 커서가 한 칸식 이동하면서

2. 배열의 메서드
	1) Array.prototype의 메서드 목록
		Symbol.iterator 가 정의된 경우 - 외부에서 iterator가 호출 됨.
		for .. of 구문 - iterator가 구현되 있을 경우 사용.

3. 다차원 배열

4. 유사배열
	- 상속관계(프로토토입 체인)가 Array.prototype이 아닌 형태
	
5. Array.prototype의 메서드를 유사 배열 객체에서 사용하기
	- this를 바꿔서 호출
	
ECMAScript6+에 추가된 기능
1. 비구조화 할당
	1) 배열의 비구조화 할당
	- 기본적인 사용법
		const|let [a,b] = [1,2];		1이 a로, 2가 b로 들어간다.
		a = 1
		b = 2
	- 이미 선언된 변수를 비구조화 할당하는 예
	- 나머지 요소
	- 요소의 기본값
	
	2) 객체의 비구조화 할당
	- 기본적인 사용법(이이름, 40)
	- 프로터피의 기본값
	- 프로퍼티 이름 생략하기( {name : name, age, age} -> {name, age} )
	
	3) 반복 가능한 객체의 비구조화 할당
	- 이터레이터, 제너레이터  -> 반복!!!
	
	4) 중첩된 자료 구조의 비구조화 할당

2. 전개 연산자

3. Map
	- key와 value
	1) Map 객체의 생성
	2) Map 객체의 메서드
	3) 데이터 추가하기
		set(key,value)
	4) 값 읽기
		get(key)
	5) 데이터가 있는지 확인
		has(key)
	6) 데이터의 삭제
		delete(key)
	7) 데이터의 열거
		keys() : 키값의 배열 목록
		values() : 값의 배열 목요
	
	8) entries():키, 값 쌍 목룍

4. Set
	- 중복이 없는 집합
	1) Set 객체의 생성
	2) Set 객체의 메서드
	3) 데이터 추가
		add(...)
	4) 데이터가 있는지 확인
		has(...)
	5) 데이터의 삭제
		delete(...)
	6) 데이터의 열거
		.forEach(...)
		
		key(), values() : 동일값