객체
1. 객체 생성하기 
	1) 객체 리터럴로 생성하는 방법
	{키:값, 키:값}
	{ } === new Object();
	값 : 모든 형태의 자료 - 원시타입 + 객체
	
	2) 생성자로 생성하는 방법
	- 함수 객체 -> 다른 객체를 만드는 객체(생성자 함수 객체)
	- 상속의 동작
	- 함수 생성자 객체의 prototype 상속
	- 함수 생성자 호출 this 값이 새로 만들어질 객체로 변경
		- 초기화 constructor 
	
	3) Object.create로 생성하는 방법

2. 프로토타입 상속
	1) 상속
	- 모든 함수는 Function.prototype 객체를 상속
	
	2) 프로토타입 체인
	[[Prototype]] : 프로토 타입 체인 : 객체 사이의 상속
	객체 - 프로토 타입 체인 - 객체 : 상속, 스크립트는 객체와 객체를 포르토타입 체인으로 상속
	__proto__ 속성 : 프로토타입 체인 변경
		
	3) Object.setPrototypeOf(자식, 부모)
		-프로토타입 체인 변경
	   Object.getPrototypeOf(자식, 부모)
		-프로토타입 체인 확인
		
3. new 연산자의 역할
	- 프로토타입 체인으로 상속관계를 만들고, constructor로 초기화 하면서 this가 변경되고 객체를 생성

4. 프로토타입 객체의 프로퍼티
5. 프로토타입의 확인
	1) instanceof 연산자
	- 프로토타입의 체인 연결 관계를 확인한다.
	
	2) isPrototypeOf 메서드	
	
6. Object.prototype
	1) Object 생성자
	
	2) Object 생성자의 프로퍼티와 메서드
	- toLocaleString() -> 지역에 맞게 형식이 변경
	- assing() -> 깊은 복사
	- getOwnPropertyDescriptors() -> 객체의 모든 속성들 확인
	- defineProperty() -> 개별 속성에 대한 정의 변경 가능
		
	3) Object.prototype의 메서드

7. Object.create로 객체 생성하기
	- 객체 생성시 상세하게 속성을 설정할 때
	- 생성자간 상속
	
8. 접근자 프로퍼티
	1) getter / setter 
	get 메서드명( ) { }
	set 메서드명(변수) { } 
	
	2) 데이터의 캡슐화(클로저를 이용)
	- 즉시 실행 함수로 만들어 지역 변수를 만들고 getter / setter를 만든다.
		
	참고)
	ES6+
		메서드의 축약 표현
		showInfo: function(){
		}
		-> showInfo(){}   <- 생성자로 사용불가

9. 프로퍼티의 속성
	1) 데이터 프로퍼티
	- 값(value)
	- 쓰기 가능(writable)
		- false : 수정불가
	- 열거 가능(enumerable)
		- false : 열거불가
	- 재정의 가능(configurable)
		- false
			- 설정 변경 불가
				쓰기 가능 여부 true -> false로 한 번은 변경 가능
			- 삭제 불가

	2) 접근자 프로퍼티
	- 읽기(get)
	- 쓰기(set)
	- 열거 가능(enumerable)
	- 재정의 가능(configurable)

	3) 프로퍼티 디스크립터 가져오기 : Object.getOwnPropertyDescriptor
	4) 객체의 프로퍼티 설정하기 : Object.defineProperty
	5) 객체의 프로퍼티 속성 여러 개를 한꺼번에 설정하기 : Object.defineProperties
	6) Object.create의 두 번째 인수

10. 프로퍼티가 있는지 확인하기		
	1) in 연산자
	- 열거 가능한 모든 속성을 체크
	
	2) hasOwnProperty 메서드
	- 현재 객체가 가지고 있는 속성만 체크
	
	3) propertyIsEnumerable 메서드
	- 반복가능한 속성이 있는지 체크

11. 프로퍼티의 열거
	1) for/in 문
	2) Object.keys 메서드
		-  열거할 수 있는 프로퍼티 이름만 배열로 만들어 반환
	3) Object.getOwnPropertyNames 메서드
		- 열거할 수 있는 프로퍼티와 열거할 수 없는 프로퍼티의 이름 모두 배열로 만드는 점이 특징

12. 객체 잠그기
	1) 확장 가능 속성
		- 객체에 새로운 프로퍼티를 추가할 수 있는지를 결정한다
	
	2) 확장 방지 : Object.preventExtensions 메서드
		- 객체에 속성 추가 방지
		
	3) 밀봉 : Object.seal 메서드
		- 설정 변경 불가, 값은 변경 가능, 속성 추가 불가
		- 삭제 불가
		
	4) 동결 : Object.freeze 메서드
		- 설정 변경 불가, 속성 추가 불가
		- 삭제 불가, 값 변경 불가
