개발환경 구축
src/main/webapp
		- HTML, JS, CSS, JSP 
src/main/webapp/WEB-INF
								- web.xml : 애플케이션 배치 설명자 파일
													- 서블릿, 필더 등등 배치에 대한 설정
								- lib : 자바 라이브러리 jar
								- classes : 컴파일된 class

메이븐 프로젝트 
	classes -> target
	lib -> src/main/resources

웹 기초
1. 요청과 응답 이해하기
	요청(request) : 브라우저
	응답(response) : 서버

	요청 전문 : 브라우저에서 
		헤더(header) - 요청 쪽 정보
			요청 URL / 요청 IP
			요청 방식(method)
			요청한 브라우저의 환경 정보(언어...)
			쿠키 정보(브라우저에 저장된 데이터의 일종)
			브라우저 정보(User-Agent)
			
		바디(body) - 요청한 쪽 데이터(요청 방식 : POST)
		
			
		
	응답 전문 : 서버에서
		헤더(header) - 응답 body 데이터 정보
			Content-Type
			응답 상태 코드 (4번 참고)
			서버 쪽에서 브라우저에 대한 행위(명령)
			LOcation : 주소 -> 브라우저의 주소 변경 -> 이동
			Set-Cookie : 키 = 값; 키 = 값; ... -> 브라우저에 쿠키 저장
			Refresh : 주기(시간)대로 새로 고침
			Cache-Control : no-cache -> 캐시 저장 하지 않음 XML
			
			참고) 캐시 -> 임시 데이터
			
		바디(body)
			서버 응답 데이터
			
			
2. HTTP ( HyperText Transfer Protocol)

3. 헤더(header)

4. HTTP 상태 코드
	2XX
		200(OK) - 정상응답
		201(CREATED) - 서버에서 데이터 정상 반영
	
	3XX
		301(영구 이동)
		302(임시 이동)
		304(캐시 됨, 임시 저장소에 저장됨)
		
	4XX - 클라이언트 오류
		400(Bad Request - 잘못된 요청) : 요청 데이터를 정해진 대로 전송하지 않은 경우
		401(Unauthorized - 접근 권한 없음)
		403(Forbidden - 금지됨)
		404(Not Found - 페이지 없음)
		405(Method Not Allowed)
	
	5XX
		500(Internal Server Error) 서버 쪽 장비 문제
		501(Not Implemented Error) 미구현
		502(Bad Gateway) 불량 게이트 웨이
		503(Service Unavailable) 임시로 서버를 닫을 때 자주 사용.

5. HTTP 요청 메서드
	

	OPTIONS : 요청 처리 전 통신 옵션 설정
	
	1) GET
		- 서버의 자원 조회 : 검색

		https://search.naver.com/search.naver
		?
		where=nexearch
		&
		sm=top_hty
		&
		fbm=0
		&
		ie=utf8
		&
		↑ 쿼리스트링(querystring) 질의 물음표 뒤에
		↑ 쿼리스트링(querystring) 질의 물음표 뒤에
	
		요청 데이터가 주소에 포함, 요청 바디는 비어 있다.
		
		
	
		요청 데이터가 주소에 포함됨
		요청 바디는 비어 있다.
		DELETE
	2) POST
		- 서버에 데이터 등록, 변경
		요청 헤더
		요청 바디
		URL 인코딩
		
		PUT - 데이터의 전체 치환
		PATCH - 데이터의 부분 치환

개발환경 구축
tomcat 10
	-Servlet 6.0
	-jakartaee 10 / jakarta.
		-servlet api
		-servlet.jsp api
	
tomcat 9, 8
	-servlet 4.0 3.0
	-javaee 8 / javax...

API(application Programming Interface) : 어플리케이션 프로그래밍 명세



서블릿(Servlet)
1. 서블릿(Servlet)의 개요
	- 자바의 웹 기술
	- jakartaee -API 명세 정의(servlet API)
	- jakarta.servlet
	- jakarta.servlet.http
	- jakarta.servlet.jsp ...
	
	
2. 서블릿(Servlet) 클래스 작성하기
3. web.xml 파일에 서블릿(Servlet) 등록하기
4. XML 문법의 기초
	<?xml version="1.0" encoding="UTF-8" ?>
	
	<servlet>
		<servlet-name> 서블릿 이름 </servlet-name>
		<servlet-class> 패키지 명을 포함한 전체 서블릿 클래스 경로 <servlet-class>
	</servlet>
	
	<servlet-mapping>
		<servlet-name> 서블릿 이름 </servlet-name>
		<url-pattern> 요청 URL 패턴 </url-pattern>
	</servlet-mapping>
	
	
HttpServletRequest : 요청

HttpservletResponse : 응답
	
5. 웹 브라우저로부터 데이터 입력 받기
6. init메서드와  destroy 메서드

	서블릿 생명 주기
	- init() 메서드 호출 -1번만 호출 / 서블릿 초기화시에 해야될 적업, 설정 작업
	
	do...(...) 매 요청이 들어올 때마다 호출
	
	- destroy() 메서드 호출 - 1번 호출 - 서블릿 객체가 소멸 전 / 자원해제		
	
	
	2) POST

		-서버에 데이터 등록, 변경
		
		
서블릿(Servlet)
1. 서블릿(Servlet)의 개요

2. 서블릿(Servlet) 클래스 작성하기

3. web.xml 파일에 서블릿(Servlet) 등록하기

4. XML 문법의 기초

5. 웹 브라우저로부터 데이터 입력 받기

6. init메서드와  destroy 메서드


서블릿 생명 주기 

객체 생성 
	init() 메서드 호출 - 1번만 호출 / 서블릿 초기화시에 해야될 작업, 설정 작업 

	do....(...) : 매 요청시 마다 호출 

	destroy() 메서드 호출 - 1 번 호출 - 서블릿 객체가 소멸 전 - 자원 해제...

필터와 래퍼

- 요청과 응답 사이에서 걸러주는 기능 

1. 필터 클래스, 필터 객체, 필터
	Filter 인터페이스를 구현 -> 필터 클래스 

2. 필터가 위치하는 곳

3. 필터 클래스의 작성, 설치, 등록
	web.xml 
		<filter>
			<filter-name>..</filter-name>
			<filter-class>...</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>...</filter-name>
			<url-pattern>...</url-pattern>
		</filter-mapping>

	- 필터 체인(filter chain)
	
4. 필터 클래스의 init 메서드와 destroy 메서드
5. 래퍼 클래스 작성 및 적용하기