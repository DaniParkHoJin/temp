쿠키
	- 개인화된 서비를 구현는 기술 
	- (브라우저별)
	- 브라우저별로 데이터를 저장(브라우저 내)
	- 서버가 개인화된 서비스를 제공하기 위해서 참고


참고)
CTRL + SHIFT + N : 시크릿 모드  

1. 쿠키의 동작과정
1) 쿠키 생성단계		
	서버-> 응답헤더(Set-Cookie : 키=값; 키=값;) -> 브라우저
	HttpServletResponse 
		addCookie(Cookie cookie)
			-> Set-Cookie: ..
	
2) 쿠키 저장단계
	브라우저가 Set-Cookie 정보를 가지고 저장
	
	
3) 쿠키 전송단계
	매 요청마다 요청 헤더에 함께 전송(Cookie)
	
	브라우저 -> 서버
	HttpServletRequest 
		Cookie[] getCookies();
		

	


2. Cookie 클래스의 메서드 종류

3. 쿠키 객체 얻기

4. 쿠키 객체의 정보 얻기
		HttpServletRequest::getCookies() 
	
		-> EL식 객체 : cookie
5. 쿠키 삭제
	-> 만료시간을 가지고 통제
	-> setMaxAge(0) : 1970.1.1 0:0:0

세션
- 쿠키 단점 
	- 브라우저에 데이터가 저장 
	- 매 요청시마다 요청 헤더를 통해서 서버에 전달
	- 데이터 유출 가능성 
	- 네트워크 상의 부담
	- 문자열만 값으로 저장 

- 세션 
	- 데이터가 서버에 저장 
	- 쿠키 JSESSIONID : 브라우저별로 구분되는 값 -> 서버 -> 브라우저별 세션 저장공간 접근
	- 네트워크를 통해서 전달 X, 서버에서 바로 조회
	- 보안적으로 유리
	- 다양한 형식의 데이터를 저장 
	
	HttpSession 인터페이스
		HttpServletRequest
			HttpSession getSession()
	
	
1. session 내장객체 메서드 종류

2. 세션 생성
	- void setAttribute(String name, Object value);

3. 세션 정보
	- Object getAttribute(String name);
	
4. 세션 삭제
	- void removeAttribute(String name);
	
	- void invalidate() : 세션 전체 비우기 - 로그아웃 구현시

5. 세션 유효 시간 설정 
	- setMaxInactiveInterval

쿠키와 세션의 차이

	쿠키
		브라우저에 저장
		요청 헤더에 담아서 저장
	
	세션
		서버에 저장
		세션 아이디가 있어야 서버에서 확인 가능



회원가입, 로그인 구현하기 

TDD : 설계 -> 테스트 -> 지속적인 리팩토링 -> 테스트 -> ...






의존성 
- servlet-api
- servlet.jsp-api
- jstl-api 
- glassfish jstl
- lombok
- junit5
- mockito 
- mockito-junit5



Controller 
	회원가입 GET / POST - /member/join
	로그인 GET / POST - /member/login
	
View
	회원가입 /WEB-INF/view/member/join.jsp
	로그인 /WEB-INF/view/member/login.jsp
	
Model
	회원가입 기능 - models/member/JoinService 
	로그인 기능 - models/member/LoginService 
	데이터 전달용(DTO) - models/member/Member
	데이터 접근용(DAO) - models/member/MemberDao
	

테스트 
	- 단위테스트 
		- 기능 단위별 테스트 
		
	- 통합테스트
	
		
TDD : 설계 -> 테스트 -> 지속적인 리팩토링 -> 테스트 -> ...
	
	