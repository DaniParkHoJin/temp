스프링 DI 설정 및 사용
1. 스프링을 이용한 객체 조립과 사용


2. DI 방식 1 : 생성자 방식

3. DI 방식2 : 세터 메서드 방식

4. @Configuration

5. @Bean 

	- getBean
	
6. 두 개 이상의 설정 파일 사용하기
	1) 생성자 매개변수
	2) @Import 
		-> 다른 설정 클래스를 병합


의존 자동 주입

1. @Autowired

2. 일치하는 빈이 없는 경우

3. @Qualifier
	-> Bean이 충돌할 때 이름으로 자동 주입할 빈을 한정할 때 사용한다.

4. 빈 이름과 기본 한정자
	- 메서드명 : 기본 이름
	- @Qualifier -> 이름 변경 가능

5. @Autowired 애노테이션의 필수 여부
	- required : 기본값(true) - 의존성 자동 주입이 필요한 객체가 X -> 예외발생(NoSuchBeanDefinitionException)
				fslse : 의존성 주입에 필요한 객체X -> setter 메서드 호출 X

	- @Nullable: 의존성이 없으면 null로 주입(setter 메서드는 호출 O)

의존성 자동 주입 방법 - @Autowired
1. 멤버 변수
2. setter 메서드
3. Optional 멤버 변수(Null 값에 대한 처리를 위해)

4. 생성자 매개변수에 의존 객체를 정의(컴포넌트 스캔..., @Autowired 생략)
	- 기본 생성자는 없어야 한다. 범위가 중요하다
	
컴포넌트 스캔
1. @Component
2. @ComponentScan

3. 기본 스캔 대상
	@Component
	@Service
	
	↓ 특정기능과 관련된 애노테이션
		@Repository
		@Configuration
		@Controller
		@RestController
		@ControllerAdivce
		@RestControllerAdvice
	
4. 컴포넌트 스캔에 따른 충돌 처리
	- 빈의 이름
		클래스명의 앞자만 소문자 형태로 만들어짐
		예) InfoService -> infoService
		    JoinService -> joinSerivce
	1) 빈 이름 충돌
	2) 수동 등록한 빈과 충돌
	3) excludeFilters
	
	AspectJ -> ANT 패턴(aspectjweaver 의존성)





빈 라이프 사이클과 범위
1. 컨테이너 초기화 : 빈 객체의 생성, 의존 주입, 초기화

2. 컨테이너 종료 : 빈 객체의 소멸

3. 빈 객체의 라이프 사이클
	1) 객체 생성 -> 의존 설정 -> 초기화 -> 소멸
	2) InitializingBean
		- afterPropertiesSet 메서드(추상) : 초기화 단계에서 호출
		- 객체가 완전해진 이후(의존설정 마무리된 후) 초기에 처리할 부분을 정의
	3) DisposableBean
		- destroy 메서드(추상) : 소멸 전에 호출
		- 정리작업, 자원해제 작업

4.  빈 객체의 초기화와 소멸 : 커스텀 메서드
	@Bean
	1) initMethod : 초기화시 호출 메서드 정의
	2) destroyMethod : 초기화시 호출 메서드 정의

5. 빈 객체의 생성과 관리 범위
	@Scope 
	- singleton : 동일 객체X
	- prototype : 객체를 생성할 때 마다 매번 새로운 새로운 객체를 생성
					- 스프링 컨테이너 관리 기능에 제약이 발생 할 가능성이 있다.